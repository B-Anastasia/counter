{"version":3,"sources":["CounterBlock/CounterBlock.module.scss","Counter/Counter.tsx","Counter/index.tsx","Button/index.tsx","Button/Button.tsx","store/count-reducer.ts","CounterBlock/CounterBlock.tsx","helperWithLocalStorage.ts","CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","store/redux-store.ts","index.tsx","CounterSettings/CounterSettings.module.scss","Counter/Counter.module.scss","Button/Button.module.scss"],"names":["module","exports","Counter","start","end","error","count","btnInc","backgroundStyle","scss","counter","countStyle","active","text","className","Button","props","button","initialState","startError","endError","btn","setStartValue","startValue","type","setEndValue","endValue","changeValueWithError","setCount","changeBtn","CounterBlock","dispatch","useDispatch","styles","buttons","disabled","onClick","saveState","key","state","stateAsString2","JSON","stringify","localStorage","setItem","restoreState","stateAsString","getItem","parse","CounterSettings","checkValue","value","undefined","isFinite","onChange","e","Number","parseInt","currentTarget","id","sameValue","activeButton","input_block","htmlFor","input","name","console","log","App","useSelector","useEffect","localStorageStartValue","localStorageEndValue","localStorageCount","Boolean","window","location","hostname","match","rootReducers","combineReducers","action","errorText","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6cbb2b75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"CounterBlock_buttons__1GJWe\"};","import React from \"react\";\r\nimport scss from './Counter.module.scss';\r\n\r\ntype CounterType = {\r\n    start: number\r\n    end: number\r\n    count: number | null\r\n    error: string\r\n    btnInc: boolean\r\n}\r\n\r\nfunction Counter({start, end, error, count, btnInc}: CounterType) {\r\n\r\n    const backgroundStyle = `block__counter ${scss.counter} `\r\n\r\n    const countStyle = btnInc\r\n        ? backgroundStyle + scss.counter\r\n        : backgroundStyle + scss.active\r\n\r\n    const text = (!error && ((start === 0 && end > 0) || (start > 0 && end === 0) || (start > 0 && end > 0)))\r\n        ? `Please enter 'set'`\r\n        : 'Please choose the values'\r\n\r\n    return (\r\n        error\r\n            ? <div className={`${backgroundStyle} ${scss.active}`}>{error}</div>\r\n            : (count !== null)\r\n            ? <div className={countStyle}>{count}</div>\r\n            : <div className={backgroundStyle}>{text}</div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import Counter from \"./Counter\";\r\nexport default Counter;","import Button from \"./Button\";\r\nexport default Button;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport scss from './Button.module.scss';\r\n\r\ntype ButtonPropsType = DetailedHTMLProps<\r\n    ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n    > & {active: boolean};\r\n\r\nconst Button: React.FC<ButtonPropsType> = ({active, ...props }) => {\r\n    return <button {...props} className={active? `${scss.button} ${scss.active}`:scss.button} />;\r\n};\r\n\r\n\r\nexport default Button;","export type ButtonsType = 'inc' | 'reset' | 'set';\r\n\r\nconst SET_START_VALUE = 'SET_START_VALUE'\r\nconst SET_END_VALUE = 'SET_END_VALUE'\r\nconst SET_ERROR='SET_ERROR'\r\nconst SET_COUNT='SET_COUNT'\r\nconst CHANGE_VALUE_WITHOUT_ERROR='CHANGE_VALUE_WITHOUT_ERROR'\r\nconst CHANGE_VALUE_WITH_ERROR='CHANGE_VALUE_WITH_ERROR'\r\nconst CHANGE_BTN='CHANGE_BTN'\r\n\r\nexport type IInitialStateType = {\r\n    start: number\r\n    end: number\r\n    startError: boolean\r\n    endError: boolean\r\n    btn: ButtonsType\r\n    count: number | null\r\n    error: string\r\n}\r\n\r\nconst initialState: IInitialStateType = {\r\n    start: 0,\r\n    end: 0,\r\n    startError: false,\r\n    endError: false,\r\n    count: null,\r\n    btn: 'set',\r\n    error: '',\r\n}\r\n\r\ntype IStartValueAT = {\r\n    type: typeof SET_START_VALUE\r\n    startValue: number\r\n}\r\ntype IEndValueAT = {\r\n    type: typeof SET_END_VALUE\r\n    endValue: number\r\n}\r\ntype ICountAT = {\r\n    type: typeof SET_COUNT\r\n    start:number|null\r\n}\r\ntype IErrorAT = {\r\n    type: typeof SET_ERROR\r\n    errorText: string\r\n}\r\n\r\ntype IChangedValueWithErrorAT = {\r\n    type: typeof CHANGE_VALUE_WITH_ERROR,\r\n    error:string\r\n}\r\ntype IChangedValueWithoutErrorAT = {\r\n    type: typeof CHANGE_VALUE_WITHOUT_ERROR\r\n}\r\ntype IChangeBtnAT = {\r\n    type: typeof CHANGE_BTN\r\n    btn:ButtonsType\r\n}\r\n\r\ntype ICommonActionTypes = IEndValueAT     | IStartValueAT|IErrorAT| IChangedValueWithErrorAT |IChangedValueWithoutErrorAT |ICountAT |IChangeBtnAT\r\n\r\nexport const countReducer = (state: IInitialStateType = initialState, action: ICommonActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET_START_VALUE\":\r\n            return {\r\n                ...state,\r\n                start:action.startValue\r\n            }\r\n        case \"SET_END_VALUE\":\r\n            return {\r\n                ...state,\r\n                end:action.endValue\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error:action.errorText\r\n            }\r\n        case \"SET_COUNT\":\r\n            return {\r\n                ...state,\r\n                count: action.start\r\n            }\r\n        case \"CHANGE_VALUE_WITH_ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                startError:true,\r\n                endError:true\r\n            }\r\n        case \"CHANGE_VALUE_WITHOUT_ERROR\":\r\n            return {\r\n                ...state,\r\n                error:'',\r\n                startError:false,\r\n                endError:false,\r\n            }\r\n        case \"CHANGE_BTN\":\r\n            return {\r\n                ...state,\r\n                btn:action.btn\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setStartValue = (startValue: number): IStartValueAT => ({type: SET_START_VALUE, startValue})\r\nexport const setEndValue = (endValue: number): IEndValueAT => ({type: SET_END_VALUE, endValue})\r\nexport const changeValueWithError = (error:string): IChangedValueWithErrorAT => ({type: CHANGE_VALUE_WITH_ERROR,error})\r\nexport const changeValueWithoutError = (): IChangedValueWithoutErrorAT => ({type: CHANGE_VALUE_WITHOUT_ERROR})\r\nexport const setCount = (start: number|null): ICountAT => ({type: SET_COUNT,start})\r\nexport const changeBtn = (btn: ButtonsType): IChangeBtnAT => ({type: CHANGE_BTN,btn})\r\nexport const setError = (errorText: string): IErrorAT => ({type: SET_ERROR, errorText})\r\n","import React from \"react\";\r\nimport Counter from \"../Counter\";\r\nimport Button from \"../Button\";\r\nimport styles from './CounterBlock.module.scss';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeBtn, setCount} from \"../store/count-reducer\";\r\n\r\nexport type ICounterBlockPropsType = {\r\n    start: number\r\n    end: number\r\n    count: number | null\r\n    btn: string\r\n    error: string\r\n}\r\n\r\nconst CounterBlock = (props: ICounterBlockPropsType) => {\r\n    const {count, btn, end, error, start} = props;\r\n\r\n    const btnInc = btn === 'inc';\r\n    const dispatch = useDispatch();\r\n    const incrementFunc = () => {\r\n        if (count !== null) {\r\n            switch (true) {\r\n                case (count + 1 < end):\r\n                    dispatch(changeBtn('inc'))\r\n                    dispatch(setCount(count + 1))\r\n                    break;\r\n                case (count + 1 === end):\r\n                    dispatch(changeBtn('reset'))\r\n                    dispatch(setCount(count + 1))\r\n                    break\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetFunc = () => {\r\n        dispatch(setCount(start))\r\n        dispatch(changeBtn('inc'))\r\n    }\r\n\r\n    return (\r\n        <div className={'block counter__box'}>\r\n            <Counter\r\n                end={end}\r\n                start={start}\r\n                count={count}\r\n                error={error}\r\n                btnInc={btnInc}/>\r\n            <div className={styles.buttons}>\r\n                <Button active={btnInc}\r\n                        disabled={!btnInc}\r\n                        onClick={incrementFunc}>inc</Button>\r\n                <Button active={btn === 'reset'}\r\n                        disabled={btn !== 'reset'}\r\n                        onClick={resetFunc}>reset</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CounterBlock;","// функция для сохранения объектов в память браузера (данные в этом хранилище сохраняться даже при перезагрузке компа)\r\n//Function for saving objects to the browser memory (data in the local storage will have saved even the computer restart)\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString2 = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString2);\r\n}\r\n\r\n// функция для получения сохранённого объекта в памяти браузера\r\nexport function restoreState(key: string):number|null {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) return JSON.parse(stateAsString);\r\n    return null\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport Button from \"../Button\";\r\nimport scss from './CounterSettings.module.scss';\r\nimport {\r\n    ButtonsType,\r\n    changeBtn,\r\n    changeValueWithError,\r\n    changeValueWithoutError,\r\n    setCount,\r\n    setEndValue,\r\n    setStartValue\r\n} from \"../store/count-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {saveState} from \"../helperWithLocalStorage\";\r\n\r\ntype ICounterSettingsPropsType = {\r\n    start: number\r\n    end: number\r\n    error: string\r\n    startError: boolean\r\n    endError: boolean\r\n    btn: ButtonsType\r\n    count: number | null\r\n}\r\n\r\n\r\nexport const CounterSettings = (props: ICounterSettingsPropsType) => {\r\n\r\n    const {start, end, endError, error, btn, count, startError} = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const checkValue = (value: number): boolean => {\r\n        if (value < 0 || value === undefined || !isFinite(value) || (value === start && value !== 0) || (value === end && value !== 0)) {\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //thunk????\r\n    const setSettings = () => {\r\n        console.log('setting')\r\n        dispatch(setCount(start))\r\n        dispatch(changeBtn('inc'))\r\n        //\r\n        saveState('count', start)\r\n        saveState('start', start)\r\n        saveState('end', end)\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setCount(null))\r\n        dispatch(changeBtn('set'))\r\n        const value = Number.parseInt(e.currentTarget.value);\r\n        if (e.currentTarget.id === 'maxVal') {\r\n            dispatch(setEndValue(value))\r\n            if (checkValue(value) && value >= start) {\r\n                dispatch(changeValueWithoutError())\r\n            } else {\r\n                dispatch(changeValueWithError('Invalid max value'))\r\n            }\r\n        } else if (e.currentTarget.id === 'minVal') {\r\n            dispatch(setStartValue(value))\r\n            if (checkValue(value) && value <= end) {\r\n                dispatch(changeValueWithoutError())\r\n            } else {\r\n                dispatch(changeValueWithError('Invalid min value'))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const sameValue = (!(end === 0 && start === 0) && end === start);\r\n    const activeButton = (!error && !(end === 0 && start === 0) && !count && btn === 'set');\r\n\r\n    return (\r\n        <div className={'block'}>\r\n            <div className={'block__counter'}>\r\n                <div className={scss.input_block}>\r\n                    <label htmlFor=\"maxVal\">max value:</label>\r\n                    <input className={endError || sameValue ? scss.error : scss.input}\r\n                           type=\"number\"\r\n                           id=\"maxVal\"\r\n                           name=\"end\"\r\n                           value={end}\r\n                           onChange={onChange}/>\r\n                </div>\r\n                <div className={scss.input_block}>\r\n                    <label htmlFor=\"minVal\">min value:</label>\r\n                    <input className={startError || sameValue ? scss.error : scss.input}\r\n                           type=\"number\" id=\"minVal\"\r\n                           name=\"start\"\r\n                           value={start}\r\n                           onChange={onChange}/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Button active={activeButton}\r\n                        disabled={!activeButton}\r\n                        onClick={setSettings}>\r\n                    set\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.scss';\nimport CounterBlock from \"./CounterBlock/CounterBlock\";\nimport {CounterSettings} from \"./CounterSettings/CounterSettings\";\nimport {restoreState} from \"./helperWithLocalStorage\";\nimport {changeBtn, IInitialStateType, setCount, setEndValue, setStartValue} from \"./store/count-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store/redux-store\";\n\nfunction App() {\n    const {start, btn, count, endError, startError, end, error} = useSelector<AppRootStateType, IInitialStateType>(state => state.counter);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const localStorageStartValue = restoreState('start');\n        const localStorageEndValue = restoreState('end');\n        const localStorageCount = restoreState('count');\n\n        if (localStorageStartValue !== null) dispatch(setStartValue(localStorageStartValue))\n        if (localStorageEndValue !== null) dispatch(setEndValue(localStorageEndValue))\n        if ((localStorageCount !== null) && localStorageCount >= 0) {\n            dispatch(changeBtn('inc'));\n            dispatch(setCount(localStorageCount))\n        }\n    }, [])\n\n    return (\n        <div className={'app'}>\n            <div className={'app__body container'}>\n                <CounterSettings\n                    start={start}\n                    end={end}\n                    startError={startError}\n                    endError={endError}\n                    error={error}\n                    btn={btn}\n                    count={count}\n                />\n                <CounterBlock\n                    error={error}\n                    start={start}\n                    end={end}\n                    count={count}\n                    btn={btn}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {countReducer} from \"./count-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducers=combineReducers({\r\n    counter:countReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>;\r\n\r\nexport const store=createStore(rootReducers,composeWithDevTools())","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CounterSettings_container__1EXBy\",\"block\":\"CounterSettings_block__DneqD\",\"block__counter\":\"CounterSettings_block__counter__1OykR\",\"error\":\"CounterSettings_error__22P1t\",\"input_block\":\"CounterSettings_input_block__2D5ho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__3rHQU\",\"block\":\"Counter_block__1MuPg\",\"block__counter\":\"Counter_block__counter__1tOrf\",\"counter\":\"Counter_counter__3L5h9\",\"active\":\"Counter_active__27ajo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Button_container__PpImP\",\"block\":\"Button_block__19t-S\",\"block__counter\":\"Button_block__counter__2LQ4N\",\"button\":\"Button_button__llVhV\",\"active\":\"Button_active__vZ_7r\"};"],"sourceRoot":""}